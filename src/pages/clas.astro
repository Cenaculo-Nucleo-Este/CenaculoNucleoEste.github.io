---
import Layout from "~/components/Layout.astro";
import ClaCard from "~/components/cla-card.astro";
import ContentSection from "~/components/content-section.astro";
import ImageModal from "~/components/ImageModal.astro";
import cla_list_json from "~/../public/clas.json";
import type { Cla } from "~/types";

const cla_list: Array<Cla> = Object.values(cla_list_json).flat().map((cla: Cla) => ({
  name: cla.name,
  agrupamento: cla.agrupamento,
  description: cla.description,
  image: cla.image,
  instagram: cla.instagram,
  facebook: cla.facebook,
  email: cla.email,
  coordinates: cla.coordinates
})).sort((a, b) => {
  // Extract the numeric part from agrupamento (e.g., "680 Santão" -> 680)
  const getAgrupamentoNumber = (agrupamento: string): number => {
    const match = agrupamento.match(/^(\d{3,4})/);
    return match ? parseInt(match[1], 10) : 0;
  };
  
  const numA = getAgrupamentoNumber(a.agrupamento);
  const numB = getAgrupamentoNumber(b.agrupamento);
  
  return numA - numB;
});

// Serialize the data for client-side use
const serializedClaList = JSON.stringify(cla_list);
---

<Layout title="O que conto Receber - Cenáculo Núcleo Este" description="O que espero ganhar com esta experiência">
  <!-- Leaflet CSS -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="" />

  <div class="flex flex-col lg:flex-row gap-8">
    <div class="lg:w-1/2 px-8 py-16">
      <ContentSection title="Os Nossos Clãs" id="clas">
        <Fragment slot="lead">
          Embora pareçamos todos <span class="text-primary">grande clã</span>, somos 
          <span class="text-primary">muitos clãs</span> que fazem deste núcleo 
          <span class="text-primary">incrível Y unido</span>
        </Fragment>
        <div id="cla-cards-container" class="flex flex-wrap gap-4 justify-center">
          {cla_list.map((cla) => (
            <ClaCard
              name={cla.name}
              agrupamento={cla.agrupamento}
              description={cla.description}
              image={cla.image}
              instagram={cla.instagram}
              facebook={cla.facebook}
              email={cla.email}
              coordinates={cla.coordinates}
            />
          ))}
        </div>
      </ContentSection>
    </div>
    
    <div class="lg:w-1/2 px-8 py-16 lg:sticky lg:top-0 h-[500px] lg:h-screen">
      <div id="map" class="w-full h-full rounded-xl overflow-hidden shadow-lg"></div>
      <button id="toggle-view" class="md:hidden fixed bottom-4 right-4 bg-primary text-white p-3 rounded-full shadow-lg z-10">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
        </svg>
      </button>
    </div>
  </div>

  <!-- Image Modal -->
  <ImageModal />

  <!-- Leaflet JS -->
  <script is:inline src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>

  <script define:vars={{ serializedClaList, baseUrl: import.meta.env.BASE_URL }}>
    document.addEventListener('DOMContentLoaded', function() {
      const clas = JSON.parse(serializedClaList);
      let activeMarker = null;
      let map;
      let markers = [];
      
      // Mobile toggle between map and list
      const toggleViewButton = document.getElementById('toggle-view');
      const claCardsContainer = document.getElementById('cla-cards-container');
      const mapContainer = document.getElementById('map').parentElement;
      
      if (toggleViewButton) {
        toggleViewButton.addEventListener('click', function() {
          if (window.innerWidth < 1024) { // Only for mobile
            if (mapContainer.style.display === 'none') {
              mapContainer.style.display = 'block';
              claCardsContainer.style.display = 'none';
              toggleViewButton.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M3 14h18m-9-4v8m-7 0h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                </svg>
              `;
              // Trigger resize to fix map display
              if (map) {
                setTimeout(() => {
                  map.invalidateSize();
                }, 100);
              }
            } else {
              mapContainer.style.display = 'none';
              claCardsContainer.style.display = 'block';
              toggleViewButton.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
                </svg>
              `;
            }
          }
        });
      }
      
      function initMap() {
        // Default center (Portugal)
        const defaultCenter = [39.5, -8.0];
        
        // Create map
        map = L.map('map').setView(defaultCenter, 7);
        
        // Add tile layer (OpenStreetMap)
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
          maxZoom: 19
        }).addTo(map);
        
        // Create custom marker icons
        const defaultIcon = L.icon({
          iconUrl: `${baseUrl}map-marker.svg`,
          iconSize: [36, 48],
          iconAnchor: [18, 48],
          popupAnchor: [0, -48]
        });
        
        const activeIcon = L.icon({
          iconUrl: `${baseUrl}map-marker-active.svg`,
          iconSize: [40, 53],
          iconAnchor: [20, 53],
          popupAnchor: [0, -53]
        });
        
        // Add markers for each clan that has coordinates
        const validCoordinates = [];
        
        clas.forEach(cla => {
          if (cla.coordinates) {
            // Create marker
            const marker = L.marker([cla.coordinates.latitude, cla.coordinates.longitude], {
              title: `${cla.name} - ${cla.agrupamento}`,
              icon: defaultIcon
            }).addTo(map);
            
            // Store marker reference
            markers.push({
              marker,
              name: cla.name
            });
            
            // Create popup content
            const popupContent = document.createElement('div');
            popupContent.className = 'info-window';
            popupContent.setAttribute('data-cla-name', cla.name);
            popupContent.style.width = '250px';
            popupContent.style.padding = '10px';
            
            // Create container for text and image
            const contentContainer = document.createElement('div');
            contentContainer.style.display = 'flex';
            contentContainer.style.alignItems = 'center';
            contentContainer.style.gap = '10px';
            
            // Text container
            const textContainer = document.createElement('div');
            textContainer.style.flex = '1';
            
            const title = document.createElement('h3');
            title.style.margin = '0';
            title.style.fontWeight = 'bold';
            title.style.fontSize = '14px';
            title.textContent = cla.name;
            
            const subtitle = document.createElement('p');
            subtitle.style.margin = '5px 0';
            subtitle.style.fontSize = '12px';
            subtitle.style.color = '#666';
            subtitle.textContent = cla.agrupamento;
            
            textContainer.appendChild(title);
            textContainer.appendChild(subtitle);
            
            // Image container
            const imageContainer = document.createElement('div');
            imageContainer.style.width = '60px';
            imageContainer.style.height = '60px';
            imageContainer.style.borderRadius = '8px';
            imageContainer.style.overflow = 'hidden';
            imageContainer.style.flexShrink = '0';
            imageContainer.style.border = '2px solid var(--color-primary)';
            
            const image = document.createElement('img');
            image.style.width = '100%';
            image.style.height = '100%';
            image.style.objectFit = 'cover';
            image.style.objectPosition = 'center center';
            
            // Function to convert image URL (same logic as in ClaCard component)
            function convertImageUrl(url) {
              if (!url) {
                // Return a default symbol image if no image is provided
                const symbolImages = [
                  `${baseUrl}simbologia/fogo.png`,
                  `${baseUrl}simbologia/evangelho.png`,
                  `${baseUrl}simbologia/pao.png`,
                  `${baseUrl}simbologia/tenda.png`,
                  `${baseUrl}simbologia/mochila.png`,
                  `${baseUrl}simbologia/vara-bifurcada.png`
                ];
                const randomIndex = Math.floor(Math.random() * symbolImages.length);
                return symbolImages[randomIndex];
              }
              
              // Check if it's a local file path
              if (url.startsWith('clas/') || (!url.startsWith('http') && (url.includes('.jpg') || url.includes('.jpeg') || url.includes('.png') || url.includes('.webp')))) {
                return `${baseUrl}${url}`;
              }
              
              // Handle Google Drive URLs
              let fileId = '';
              if (!url.startsWith('http')) {
                fileId = url;
              } else if (url.includes('drive.google.com') && url.includes('drive-viewer/')) {
                const match = url.match(/drive-viewer\/([A-Za-z0-9_-]+)/);
                if (match && match[1]) {
                  fileId = match[1];
                }
              } else if (url.includes('drive.google.com') && url.includes('/file/d/')) {
                const match = url.match(/\/file\/d\/([A-Za-z0-9_-]+)/);
                if (match && match[1]) {
                  fileId = match[1];
                }
              }
              
              if (fileId) {
                return `https://drive.google.com/thumbnail?id=${fileId}&sz=w400-h400`;
              }
              
              return url;
            }
            
            image.src = convertImageUrl(cla.image);
            image.alt = cla.name;
            imageContainer.appendChild(image);
            
            contentContainer.appendChild(textContainer);
            contentContainer.appendChild(imageContainer);
            
            const button = document.createElement('button');
            button.className = 'view-clan-btn';
            button.style.backgroundColor = 'var(--color-primary)';
            button.style.color = 'white';
            button.style.border = 'none';
            button.style.padding = '5px 10px';
            button.style.borderRadius = '4px';
            button.style.marginTop = '8px';
            button.style.cursor = 'pointer';
            button.style.width = '100%';
            button.textContent = 'Ir';
            
            button.addEventListener('click', () => {
              // Open Google Maps with the clan's coordinates
              if (cla.coordinates) {
                const googleMapsUrl = `https://www.google.com/maps/search/?api=1&query=${cla.coordinates.latitude},${cla.coordinates.longitude}`;
                window.open(googleMapsUrl, '_blank');
              }
            });
            
            popupContent.appendChild(contentContainer);
            popupContent.appendChild(button);
            
            // Create popup
            const popup = L.popup({
              maxWidth: 250,
              closeButton: true
            }).setContent(popupContent);
            
            // Add popup to marker
            marker.bindPopup(popup);
            
            // Add marker events
            marker.on('click', function() {
              // Reset previous active marker
              if (activeMarker) {
                activeMarker.setIcon(defaultIcon);
              }
              
              // Set this marker as active
              marker.setIcon(activeIcon);
              activeMarker = marker;
              
              // On desktop, automatically scroll to the clan card
              if (window.innerWidth >= 1024) {
                scrollToClanCard(cla.name);
              }
            });
            
            marker.on('mouseover', function() {
              if (marker !== activeMarker) {
                marker.setIcon(L.icon({
                  iconUrl: `${baseUrl}map-marker.svg`,
                  iconSize: [40, 53],
                  iconAnchor: [20, 53],
                  popupAnchor: [0, -53]
                }));
              }
            });
            
            marker.on('mouseout', function() {
              if (marker !== activeMarker) {
                marker.setIcon(defaultIcon);
              }
            });
            
            // Store coordinates for bounds calculation
            validCoordinates.push([cla.coordinates.latitude, cla.coordinates.longitude]);
          }
        });
        
        // Fit map to markers if there are any clans with coordinates
        if (validCoordinates.length > 0) {
          map.fitBounds(validCoordinates);
          
          // Prevent excessive zoom when there's only one marker
          if (validCoordinates.length === 1) {
            map.setZoom(15);
          }
        }
      }
      
      // Function to scroll to clan card
      function scrollToClanCard(claName) {
        const claCards = document.querySelectorAll('.card');
        claCards.forEach(card => {
          const nameElement = card.querySelector('.name');
          if (nameElement && nameElement.textContent === claName) {
            card.scrollIntoView({ behavior: 'smooth', block: 'center' });
            card.classList.add('highlight-card');
            setTimeout(() => {
              card.classList.remove('highlight-card');
            }, 2000);
          }
        });
      }
      
      // Initialize the map
      initMap();
    });
  </script>

  <style>
    .highlight-card {
      transform: scale(1.05);
      box-shadow: 0 0 20px var(--color-primary);
      transition: all 0.3s ease;
    }
    
    @media (max-width: 1024px) {
      .lg\:w-1\/2.sticky {
        position: relative;
        height: 500px;
      }
    }
    
    /* Leaflet popup styles */
    .leaflet-popup-content-wrapper {
      border-radius: 8px;
    }
    
    .leaflet-popup-content {
      margin: 0;
      padding: 0;
    }
    
    .view-clan-btn:hover {
      background-color: var(--color-secondary) !important;
    }
  </style>
</Layout> 